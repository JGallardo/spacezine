---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';

interface Props {
	title: string;
	description: string;
	pubDate: Date;
	updatedDate?: Date;
	heroImage?: string;
	author?: string;
	categories?: Array<{ name: string; slug: string }>;
	tags?: Array<{ name: string; slug: string }>;
}

const { title, description, pubDate, updatedDate, heroImage, author, categories, tags } = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
				width: 100%;
				height: auto;
				aspect-ratio: 4 / 1;
				object-fit: cover;
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 32px);
				margin: auto;
				padding: 16px;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 16px;
				padding: 16px 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 8px 0;
			}
			.date {
				margin-bottom: 8px;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{heroImage && <img width={1020} height={510} src={heroImage} alt="" />}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{author && <span> â€¢ By {author}</span>}
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
						{categories && categories.length > 0 && (
							<div class="categories">
								Categories: {categories.map(cat => cat.name).join(', ')}
							</div>
						)}
						{tags && tags.length > 0 && (
							<div class="tags">
								Tags: {tags.map(tag => tag.name).join(', ')}
							</div>
						)}
						<hr />
					</div>
					<slot />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
