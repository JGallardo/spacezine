---
import { Image } from 'astro:assets';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Header from '../../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts';
import { getWordPressPosts } from '../../lib/wordpress.js';

const allPosts = (await getWordPressPosts())
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const initialPosts = allPosts.slice(0, 12);
const remainingPosts = allPosts.slice(12);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			
			.masonry-grid {
				columns: 4;
				column-gap: 16px;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			
			.masonry-item {
				break-inside: avoid;
				margin-bottom: 16px;
				transition: all 0.2s ease;
				display: block;
			}
			
			.masonry-item:hover {
				transform: scale(1.02);
			}
			
			.masonry-item a {
				display: block;
				text-decoration: none;
				color: inherit;
			}
			
			.masonry-item img {
				width: 100%;
				height: auto;
				display: block;
				border-radius: 8px;
				margin-bottom: 8px;
				transition: 0.2s ease;
			}
			
			.image-container {
				background-color: #f0f0f0;
				border-radius: 8px;
				overflow: hidden;
				margin-bottom: 8px;
				transition: 0.2s ease;
				position: relative;
				width: 100%;
				height: 0;
				padding-bottom: var(--img-padding);
			}
			
			.masonry-item:hover .image-container {
				box-shadow: var(--box-shadow);
			}
			
			.image-container img {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				object-fit: cover;
				margin: 0;
				border-radius: 0;
			}
			
			.image-container::before {
				content: '';
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
				width: 20px;
				height: 20px;
				border: 2px solid #ddd;
				border-top: 2px solid #666;
				border-radius: 50%;
				animation: spin 1s linear infinite;
				z-index: 1;
			}
			
			.image-container.loaded::before {
				display: none;
			}
			
			@keyframes spin {
				0% { transform: translate(-50%, -50%) rotate(0deg); }
				100% { transform: translate(-50%, -50%) rotate(360deg); }
			}
			
			.masonry-item .title {
				margin: 0 0 4px 0;
				color: rgb(var(--black));
				font-size: 1.1rem;
				font-weight: 700;
				line-height: 1.2;
			}
			
			.masonry-item .date {
				margin: 0;
				color: rgb(var(--gray));
				font-size: 0.85rem;
			}
			
			.masonry-item:hover .title {
				color: rgb(var(--accent));
			}
			
			@media (max-width: 1200px) {
				.masonry-grid {
					columns: 3;
				}
			}
			
			@media (max-width: 800px) {
				.masonry-grid {
					columns: 2;
				}
			}
			
			@media (max-width: 500px) {
				.masonry-grid {
					columns: 1;
					column-gap: 0;
				}
				
				.masonry-item {
					margin-bottom: 24px;
				}
			}
		</style>
		<script>
			document.addEventListener('DOMContentLoaded', () => {
				// Show loading message for 3 seconds
				const loadingMessage = document.createElement('div');
				loadingMessage.textContent = 'Loading...';
				loadingMessage.style.cssText = `
					position: fixed;
					top: 50%;
					left: 50%;
					transform: translate(-50%, -50%);
					background: rgba(0,0,0,0.8);
					color: white;
					padding: 20px 40px;
					border-radius: 8px;
					font-size: 18px;
					z-index: 1000;
				`;
				document.body.appendChild(loadingMessage);
				
				setTimeout(() => {
					loadingMessage.remove();
					
					const lazyItems = document.querySelectorAll('.lazy-item');

					lazyItems.forEach(item => {
						item.style.display = 'block';
						const img = item.querySelector('img[data-src]');
						if (img) {
							img.style.opacity = '0';
						}
					});

					setTimeout(() => {
						let index = 0;
						const loadNext = () => {
							if (index < lazyItems.length) {
								const item = lazyItems[index];
								const img = item.querySelector('img[data-src]');
								const container = item.querySelector('.image-container');
								
								if (img && img.dataset.src) {
									img.onload = () => {
										container.classList.add('loaded');
										img.style.opacity = '1';
										img.style.transition = 'opacity 0.3s ease';
									};
									img.src = img.dataset.src;
									img.removeAttribute('data-src');
								}
								
								index++;
								setTimeout(loadNext, 100);
							}
						};
						loadNext();
					}, 500);
				}, 3000);
			});
		</script>
	</head>
	<body>
		<Header />
		<main>
			<section>
				<ul class="masonry-grid">
					{
						initialPosts.map((post, index) => (
							<li class="masonry-item">
								<a href={`/archive/${post.slug}/`}>
									{post.data.heroImage && (
										<div 
											class="image-container loaded"
											style={{
												'--img-padding': post.data.imageWidth && post.data.imageHeight 
													? `${((post.data.imageHeight / post.data.imageWidth) * 100).toFixed(2)}%` 
													: '75%',
												...(post.data.dominantColor ? { 'background-color': post.data.dominantColor } : {})
											}}
										>
											<img 
												src={post.data.heroImage} 
												alt={post.data.title}
												width={post.data.imageWidth}
												height={post.data.imageHeight}
												loading={index < 6 ? "eager" : "lazy"}
											/>
										</div>
									)}
									<h4 class="title">{post.data.title}</h4>
									<p class="date">
										<FormattedDate date={post.data.pubDate} />
									</p>
								</a>
							</li>
						))
					}
					{
						remainingPosts.map((post) => (
							<li class="masonry-item lazy-item" style="display: none;">
								<a href={`/archive/${post.slug}/`}>
									{post.data.heroImage && (
										<div 
											class="image-container"
											style={{
												'--img-padding': post.data.imageWidth && post.data.imageHeight 
													? `${((post.data.imageHeight / post.data.imageWidth) * 100).toFixed(2)}%` 
													: '75%',
												...(post.data.dominantColor ? { 'background-color': post.data.dominantColor } : {})
											}}
										>
											<img 
												data-src={post.data.heroImage} 
												alt={post.data.title}
												width={post.data.imageWidth}
												height={post.data.imageHeight}
												loading="lazy"
											/>
										</div>
									)}
									<h4 class="title">{post.data.title}</h4>
									<p class="date">
										<FormattedDate date={post.data.pubDate} />
									</p>
								</a>
							</li>
						))
					}
				</ul>
			</section>
		</main>
		<Footer />
	</body>
</html>
